/*
Environment.cpp
Andrew Ng
Dec 9 2019
source code for Environment class
*/


#include "Environment.h"
#include <iostream>
#include <algorithm>
#include <random>
#include <iomanip>


// Cleans room or moves vacuum based on given action
void Environment::iteration() {
	if (action_ == 0) {
		std::cout << "Cleaning room... " << std::endl;
		rooms_[vacuumPos_] = 0;
	}
	else if(action_ == 1) {
		if (vacuumPos_ != 0) {
			std::cout << "Moving to left... " << std::endl;
			vacuumPos_--;
		}
		else {
			std::cout << "Moving to right... " << std::endl;
			vacuumPos_++;
		}
	}
	else if (action_ == 2) {
		if (vacuumPos_ != rooms_.size() - 1) {
			std::cout << "Moving to right... " << std::endl;
			vacuumPos_++;
		}
		else {
			std::cout << "Moving to left... " << std::endl;
			vacuumPos_--;
		}
	}
}


// Sets action based on option (generated by agent)
void Environment::setAction(const int& option) {
	action_ = option;
}


// Returns current vacuum position
size_t Environment::getRoom() const {
	return vacuumPos_;
}


// Returns copy of vector of rooms
std::vector<bool> Environment::getRooms() const {
	return rooms_;
}


// Returns clean/dirty status of given room
int Environment::getStatus(const size_t& roomNum) const {
	return rooms_[roomNum];
}


// Prints 3 vectors showing: 
// Room numbers, clean/dirty status, and vacuum position
void Environment::printEnvironment() const {
	std::cout << std::endl;
	std::vector<char> vacVec(rooms_.size(), '-');
	vacVec.insert(vacVec.begin() + vacuumPos_, 'V');
	vacVec.pop_back();
	std::cout << std::setw(15) << "Room Numbers: ";
	for (size_t i = 0; i < rooms_.size(); ++i) {
		std::cout << i;
	}
	std::cout << std::endl;
	std::cout << std::setw(15) << "Clean/Dirty: ";
	for (size_t i = 0; i < rooms_.size(); ++i) {
		if (rooms_[i] == 0) {
			std::cout << 'C';
		}
		else {
			std::cout << 'D';
		}
	}
	std::cout << std::endl;
	std::cout << std::setw(15) << "Vacuum Pos.: ";
	for (size_t i = 0; i < vacVec.size(); ++i) {
		std::cout << vacVec[i];
	}
	std::cout << std::endl;
}


// Returns True if all rooms are clean, else False
bool Environment::checkClean() const {
	if (std::find(rooms_.begin(), rooms_.end(), 1) == rooms_.end()) {
		return 1;
	}
	return 0;
}


// On every iteration, 30% chance to make new room with random position
void Environment::makeRoom() {
	std::random_device rd;
	std::mt19937 gen(rd());
	std::uniform_int_distribution<int> distrib1(1, 10);
	std::uniform_int_distribution<int> distrib2(0, rooms_.size() - 1);
	int randNum = distrib1(gen);
	if (randNum < 4) {
		int newPos = distrib2(gen);
		rooms_.insert(rooms_.begin() + newPos, 1);
		if (newPos <= vacuumPos_) {
			vacuumPos_++;
		}
		std::cout << "New room at pos " << newPos << std::endl;
	}
}